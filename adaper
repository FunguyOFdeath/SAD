#include <iostream>

// Целевой интерфейс, который мы хотим использовать
class Printer
{
public:
    virtual void print() = 0; // Чисто виртуальная функция для печати
};

// Существующий класс, который нужно адаптировать
class LegacyPrinter
{
public:
    void printDocument() // Метод, имитирующий печать документа старым принтером
    {
        std::cout << "Legacy Printer is printing a document." << std::endl;
    }
};

// Адаптер, наследуемый от целевого интерфейса
class PrinterAdapter : public Printer
{
private:
    LegacyPrinter legacyPrinter; // Экземпляр старого принтера

public:
    void print() override // Реализация метода печати целевого интерфейса
    {
        legacyPrinter.printDocument(); // Адаптер вызывает метод старого принтера
    }
};

// Клиентский код, который использует целевой интерфейс
void clientCode(Printer& printer)
{
    printer.print(); // Вызов метода печати через интерфейс
}

int main()
{
    PrinterAdapter adapter; // Создаем адаптер
    clientCode(adapter); // Используем адаптер в качестве принтера
    return 0;
}
